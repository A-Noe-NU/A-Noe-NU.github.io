!function(t){function n(I){if(g[I])return g[I].exports;var c=g[I]={i:I,l:!1,exports:{}};return t[I].call(c.exports,c,c.exports,n),c.l=!0,c.exports}var g={};n.m=t,n.c=g,n.i=function(t){return t},n.d=function(t,g,I){n.o(t,g)||Object.defineProperty(t,g,{configurable:!1,enumerable:!0,get:I})},n.n=function(t){var g=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(g,"a",g),g},n.o=function(t,n){return Object.prototype.hasOwnProperty.call(t,n)},n.p="",n(n.s=0)}([function(module,exports,__webpack_require__){"use strict";eval("\n\nvar width = window.innerWidth;\nvar height = window.innerHeight;\n\nfunction main(regl, citiesData, imgData) {\n  var numPoints = 100000;\n  var pointWidth = 4;\n  var pointMargin = 1;\n  var duration = 1500;\n  var delayByIndex = 500 / numPoints;\n  var maxDuration = duration + delayByIndex * numPoints; // include max delay in here\n\n  var toCities = function toCities(points) {\n    return citiesLayout(points, width, height, citiesData);\n  };\n  var toBars = function toBars(points) {\n    return barsLayout(points, width, height, citiesData);\n  };\n  var toSwarm = function toSwarm(points) {\n    return swarmLayout(points, width, height, citiesData);\n  };\n  var toPhoto = function toPhoto(points) {\n    return photoLayout(points, width, height, imgData);\n  };\n  var toArea = function toArea(points) {\n    return areaLayout(points, width, height, citiesData);\n  };\n  var toPhyllotaxis = function toPhyllotaxis(points) {\n    return phyllotaxisLayout(points, pointWidth, width / 2, height / 2, citiesData);\n  };\n  var toMiddle = function toMiddle(points) {\n    points.forEach(function (d, i) {\n      d.x = width / 2;\n      d.y = height / 2;\n      d.color = [0, 0, 0];\n    });\n  };\n  var toBlack = function toBlack(points) {\n    points.forEach(function (d, i) {\n      d.color = [0, 0, 0];\n    });\n  };\n\n  var layouts = [toPhyllotaxis, toCities, toArea, toBars, toPhoto, toBlack];\n  var currentLayout = 0;\n\n  // wrap d3 color scales so they produce vec3s with values 0-1\n  // also limit the t value to remove darkest color\n  function wrapColorScale(scale) {\n    var tScale = d3.scaleLinear().domain([0, 1]).range([0.4, 1]);\n    return function (t) {\n      var rgb = d3.rgb(scale(tScale(t)));\n      return [rgb.r / 255, rgb.g / 255, rgb.b / 255];\n    };\n  }\n\n  var colorScales = [d3.scaleSequential(d3.interpolateViridis), d3.scaleSequential(d3.interpolateMagma), d3.scaleSequential(d3.interpolateInferno), d3.scaleSequential(d3.interpolateCool)].map(wrapColorScale);\n  var currentColorScale = 0;\n\n  // function to compile a draw points regl func\n  function createDrawPoints(points) {\n    var drawPoints = regl({\n      frag: '\\n\\t\\t  precision highp float;\\n\\t\\t\\tvarying vec3 fragColor;\\n\\t\\t\\tvoid main() {\\n\\t\\t\\t\\tgl_FragColor = vec4(fragColor, 1);\\n\\t\\t\\t}\\n\\t\\t\\t',\n\n      vert: '\\n\\t\\t\\tattribute vec2 positionStart;\\n\\t\\t\\tattribute vec2 positionEnd;\\n\\t\\t\\tattribute float index;\\n\\t\\t\\tattribute vec3 colorStart;\\n\\t\\t\\tattribute vec3 colorEnd;\\n\\n\\t\\t\\tvarying vec3 fragColor;\\n\\n\\t\\t\\tuniform float pointWidth;\\n\\t\\t\\tuniform float stageWidth;\\n\\t\\t\\tuniform float stageHeight;\\n\\t\\t\\tuniform float elapsed;\\n\\t\\t\\tuniform float duration;\\n\\t\\t\\tuniform float delayByIndex;\\n\\t\\t\\t// uniform float tick;\\n\\t\\t\\t// uniform float animationRadius;\\n\\t\\t\\tuniform float numPoints;\\n\\n\\t\\t\\t// helper function to transform from pixel space to normalized device coordinates (NDC)\\n\\t\\t\\t// in NDC (0,0) is the middle, (-1, 1) is the top left and (1, -1) is the bottom right.\\n\\t\\t\\tvec2 normalizeCoords(vec2 position) {\\n\\t\\t\\t\\t// read in the positions into x and y vars\\n\\t      float x = position[0];\\n\\t      float y = position[1];\\n\\n\\t\\t\\t\\treturn vec2(\\n\\t\\t      2.0 * ((x / stageWidth) - 0.5),\\n\\t\\t      // invert y since we think [0,0] is bottom left in pixel space\\n\\t\\t      -(2.0 * ((y / stageHeight) - 0.5)));\\n\\t\\t\\t}\\n\\n\\t\\t\\t// helper function to handle cubic easing (copied from d3 for consistency)\\n\\t\\t\\t// note there are pre-made easing functions available via glslify.\\n\\t\\t\\tfloat easeCubicInOut(float t) {\\n\\t\\t\\t\\tt *= 2.0;\\n        t = (t <= 1.0 ? t * t * t : (t -= 2.0) * t * t + 2.0) / 2.0;\\n\\n        if (t > 1.0) {\\n          t = 1.0;\\n        }\\n\\n        return t;\\n\\t\\t\\t}\\n\\n\\t\\t\\tvoid main() {\\n\\t\\t\\t\\tgl_PointSize = pointWidth;\\n\\n\\t\\t\\t\\tfloat delay = delayByIndex * index;\\n\\t      float t;\\n\\n\\t      // drawing without animation, so show end state immediately\\n\\t      if (duration == 0.0) {\\n\\t        t = 1.0;\\n\\n\\t      // still delaying before animating\\n\\t      } else if (elapsed < delay) {\\n\\t        t = 0.0;\\n\\t      } else {\\n\\t        t = easeCubicInOut((elapsed - delay) / duration);\\n\\t      }\\n\\n\\t      // interpolate position\\n\\t      vec2 position = mix(positionStart, positionEnd, t);\\n\\n\\t      // apply an ambient animation\\n\\t\\t\\t\\t// float dir = index > numPoints / 2.0 ? 1.0 : -1.0;\\n\\t      // position[0] += animationRadius * cos((tick + index) * dir);\\n\\t      // position[1] += animationRadius * sin((tick + index) * dir);\\n\\n\\t      // above we + index to offset how they move\\n\\t      // we multiply by dir to change CW vs CCW for half\\n\\n\\n\\t      // interpolate color\\n\\t      fragColor = mix(colorStart, colorEnd, t);\\n\\n\\t      // scale to normalized device coordinates\\n\\t\\t\\t\\t// gl_Position is a special variable that holds the position of a vertex\\n\\t      gl_Position = vec4(normalizeCoords(position), 0.0, 1.0);\\n\\t\\t\\t}\\n\\t\\t\\t',\n\n      attributes: {\n        positionStart: points.map(function (d) {\n          return [d.sx, d.sy];\n        }),\n        positionEnd: points.map(function (d) {\n          return [d.tx, d.ty];\n        }),\n        colorStart: points.map(function (d) {\n          return d.colorStart;\n        }),\n        colorEnd: points.map(function (d) {\n          return d.colorEnd;\n        }),\n        index: d3.range(points.length)\n      },\n\n      uniforms: {\n        pointWidth: regl.prop('pointWidth'),\n        stageWidth: regl.prop('stageWidth'),\n        stageHeight: regl.prop('stageHeight'),\n        delayByIndex: regl.prop('delayByIndex'),\n        duration: regl.prop('duration'),\n        numPoints: numPoints,\n        // animationRadius: 0,// 15.0,\n        // tick: (reglprops) => { // increase multiplier for faster animation speed\n        // \t// console.log(reglprops);\n        // \t// return reglprops.tick / 50;\n        // \treturn 0; // disable ambient animation\n        // },\n        // time in milliseconds since the prop startTime (i.e. time elapsed)\n        elapsed: function elapsed(_ref, _ref2) {\n          var time = _ref.time;\n          var _ref2$startTime = _ref2.startTime,\n              startTime = _ref2$startTime === undefined ? 0 : _ref2$startTime;\n          return (time - startTime) * 1000;\n        }\n      },\n\n      count: points.length,\n      primitive: 'points'\n    });\n\n    return drawPoints;\n  }\n\n  // function to start animation loop (note: time is in seconds)\n  function animate(layout, points) {\n    console.log('animating with new layout');\n    // make previous end the new beginning\n    points.forEach(function (d) {\n      d.sx = d.tx;\n      d.sy = d.ty;\n      d.colorStart = d.colorEnd;\n    });\n\n    // layout points\n    layout(points);\n\n    // copy layout x y to end positions\n    var colorScale = colorScales[currentColorScale];\n    points.forEach(function (d, i) {\n      d.tx = d.x;\n      d.ty = d.y;\n      // d.colorEnd = colorScale(i / points.length)\n      d.colorEnd = d.color;\n    });\n\n    // create the regl function with the new start and end points\n    var drawPoints = createDrawPoints(points);\n\n    // start an animation loop\n    var startTime = null; // in seconds\n    var frameLoop = regl.frame(function (_ref3) {\n      var time = _ref3.time;\n\n      // keep track of start time so we can get time elapsed\n      // this is important since time doesn't reset when starting new animations\n      if (startTime === null) {\n        startTime = time;\n      }\n\n      // clear the buffer\n      regl.clear({\n        // background color (black)\n        color: [0, 0, 0, 1],\n        depth: 1\n      });\n\n      // draw the points using our created regl func\n      // note that the arguments are available via `regl.prop`.\n      drawPoints({\n        pointWidth: pointWidth,\n        stageWidth: width,\n        stageHeight: height,\n        duration: duration,\n        delayByIndex: delayByIndex,\n        startTime: startTime\n      });\n\n      // how long to stay at a final frame before animating again (in seconds)\n      var delayAtEnd = 0.1;\n\n      // if we have exceeded the maximum duration, move on to the next animation\n      if (time - startTime > maxDuration / 1000 + delayAtEnd) {\n        console.log('done animating, moving to next layout');\n\n        frameLoop.cancel();\n        currentLayout = (currentLayout + 1) % layouts.length;\n        currentColorScale = (currentColorScale + 1) % colorScales.length;\n\n        // when restarting at the beginning, come back from the middle again\n        if (currentLayout === 0) {\n          points.forEach(function (d, i) {\n            d.tx = width / 2;\n            d.ty = height / 2;\n            d.colorEnd = [0, 0, 0];\n          });\n        }\n\n        animate(layouts[currentLayout], points);\n      }\n    });\n  }\n\n  // create initial set of points\n  var points = d3.range(numPoints).map(function (d) {\n    return {};\n  });\n\n  points.forEach(function (d, i) {\n    d.tx = width / 2;\n    d.ty = height / 2;\n    d.colorEnd = [0, 0, 0];\n  });\n\n  // start animation loop\n  animate(layouts[currentLayout], points);\n}\n\nloadData(width, height).then(function (_ref4) {\n  var citiesData = _ref4.citiesData,\n      imgData = _ref4.imgData;\n\n  console.log('data has loaded. initializing regl...');\n\n  // initialize regl\n  createREGL({\n    // callback when regl is initialized\n    onDone: function onDone(err, regl) {\n      if (err) {\n        console.error('Error initializing regl', err);\n        return;\n      }\n      main(regl, citiesData, imgData);\n    }\n  });\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///0\n")}]);